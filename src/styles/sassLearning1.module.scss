$bar-width: 50px;
$bar-height: 8px;
$humbu-gap: 6px;
$bar-background: #333;
$hamburgerBtn-height: $bar-height*3 + $humbu-gap*2; //Переменная для подсчета ровного перекрестия крестика 
$active-width: $hamburgerBtn-height*1.414213562; //Переменная для подсчета ровного перекрестия крестика, умножаем на корень из 2
$animation-timing: 0.5s;

.container {
    * {
        box-sizing: border-box;
        padding: 0;
        margin: 0;
    }

    position: relative;
    display: flex;
    justify-content: flex-start;
    flex: 1;
    background-color: gray;
    z-index: 1;
}

// Гамбургер кнопка ----------
.hamburgerBtn {
    position: absolute;
    top: 5px;
    left: 5px;
    display: flex;
    flex-direction: column;
    gap: $humbu-gap;
    cursor: pointer;
    z-index: 10;
    background-color: white;

    &::before,
    &::after, 
    & > input {
        content: '';
        width: $bar-width;
        height: $bar-height;
        background-color: $bar-background;
        border-radius: $bar-height;
        transform-origin: left;
        transition:
            // //Играюсь с задержкой анимации. Время что мы указаваем после длительности анимации - это длительность задержки
            // opacity $animation-timing 0.5s,
            // width $animation-timing 0.5s,
            opacity $animation-timing,
            width $animation-timing,
            rotate $animation-timing,
            translate $animation-timing;
    }

    & > input {
        appearance: none;
        outline: none; ////Отключаем outline когда мы наводимся на input через TAB
        pointer-events: none; //Отключаем возможность кликать/взаимодействовать с input
    }
}

.hamburgerBtn > input:checked {
    opacity: 0;
    width: 0;
}
// //Играюсь с задержкой анимации. Время что мы указаваем после длительности анимации - это длительность задержки
// .hamburgerBtn:has(>input:checked)::before,
// .hamburgerBtn:has(>input:checked)::after,
// .hamburgerBtn > input:checked {
//     transition: 
//     opacity $animation-timing,
//     width $animation-timing,
//     rotate $animation-timing 0.5s,
//     translate $animation-timing 0.5s;
// }

.hamburgerBtn:has(>input:checked)::before {
    width: $active-width; //Подсчитываем длину, чтобы части крестика влезвали в hamburgerBtn елемент
    rotate: 45deg;
    translate: 7px $bar-height/-2; //7px - Сдвигаем крестик от края кнопки, к ее центру
}
.hamburgerBtn:has(>input:checked)::after {
    width: $active-width; //Подсчитываем длину, чтобы части крестика влезвали в hamburgerBtn елемент
    rotate: -45deg;
    translate: 7px $bar-height/2; //7px - Сдвигаем крестик от края кнопки, к ее центру
}

// Гамбургер боковое меню ----------
.sideBar {
    width: 100%;
    max-width: 500px;
    min-height: 95vh;
    padding: 20px;
    padding-top: $hamburgerBtn-height + 30px;
    background-color: aqua;

    translate: -100%;
    transition: translate $animation-timing,
}
.hamburgerBtn:has(>input:checked) + .sideBar { //chose .sideBar  directly after hamburgerBtn
    translate: 0;
}


////Hardcoded Humburger solution
// .container {
//     position: relative;
//     display: flex;
//     justify-content: center;
//     align-items: center;
//     height: 50px;
//     flex: 1;
//     background-color: gray;
//     z-index: 1;
// }

// .burgerBtn {
//     position: absolute;
//     display: flex;
//     flex-direction: column;
//     justify-content: center;
//     align-items: center;
//     gap: 3px;
//     top: 5px;
//     right: 5px;
//     width: 40px;
//     height: 40px;
//     background-color: white;
//     z-index: 2;
//     border: none;

//     &:hover {
//         cursor: pointer;
//     }

//     span {
//         position: absolute;
//         top: 50%;
//         display: flex;
//         width: 35px;
//         height: 3px;
//         background-color: black;
//         transition: all 0.5s ease-out;
//     }
// }

// .burgerOpen {
//     span {
//         &:nth-child(1) {
//             transform: rotate(45deg);
//             transform-origin: center center;
//         }
//         &:nth-child(2) {
//             opacity: 0;
//         }
//         &:nth-child(3) {
//             transform: rotate(-45deg);
//             transform-origin: center center;
//         }
//     }
// }
